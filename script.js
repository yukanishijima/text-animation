const canvas = document.getElementById("canvas1");
const ctx = canvas.getContext("2d");
canvas.width = window.innerWidth; // canvas size set as entire browser window
canvas.height = window.innerHeight;

let particleArray = [];
let adjustX = 0;
let adjustY = 0;

// handle mouse coordinates
const mouse = {
	x: null,
	y: null,
	radius: 50, // size of the circular area around the mouse which will react with the particles
};
// extracting x & y to the mouse object so that the coordinates are accessible globally
window.addEventListener("mousemove", function (event) {
	mouse.x = event.x;
	mouse.y = event.y;
});

ctx.fillStyle = "black"; // fill the drawing with selected colour
ctx.font = "50px Verdane";
ctx.fillText("Be", 0, 50, 200); // text, x, y, (max pixel in text)
// ctx.strokeStyle = "white";
// ctx.strokeRect(0, 0, 200, 200);
const textCoordinates = ctx.getImageData(0, 0, canvas.width, canvas.height); // get object representing the underlying pixel data for a specified portion of the canvas (x-axis, y-axis, width, height)

class Particle {
	// runs only once to create a blue print of particle
	constructor(x, y) {
		this.x = x;
		this.y = y;
		this.size = 1; // radius of each particle
		this.baseX = this.x; // hold initial coordinates of the particle
		this.baseY = this.y;
		this.density = Math.random() * 30 + 1; // 1 - 30, determines how heavy the particles are and how fast it moves away from mouse
	}

	// draw particles
	draw() {
		ctx.fillStyle = "black";
		ctx.beginPath();
		ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2); // add a circular arc (x, y, radius, startAngle, endAngle)
		ctx.closePath();
		ctx.fill();
	}

	// calculate distance between mouse and particles and move particles
	update() {
		let dx = mouse.x - this.x;
		let dy = mouse.y - this.y;
		// distance between mouse and particle ()= hypotenuse　直径三角形の斜辺)
		let distance = Math.sqrt(dx * dx + dy * dy); // Math.sqrt calculates returns the square root of a number

		let forceDirectionX = dx / distance;
		let forceDirectionY = dy / distance;

		let maxDistance = mouse.radius; // to be converted to a range of 1 to 0 so that it can be used to move particles in proportions to its current distance from the mouse
		let force = (maxDistance - distance) / maxDistance; // calculates which proportion of max distance it is (from a range of 1 to 0) so that particle slows down as it moves closer to the mouse

		// combine all factors that play a role in particle's movement
		let directionX = forceDirectionX * force * this.density;
		let directionY = forceDirectionY * force * this.density;

		// if particle is within the mouse radius, they move away from the mouse
		if (distance < mouse.radius) {
			// as particles move away from mouse, they change as directed by directionX & Y
			this.x -= directionX; // - : move away, + : move forwards
			this.y -= directionY;
		} else {
			// once particle moves far enough from mouse, they go back to its original location
			if (this.x != this.baseX) {
				let dx = this.x - this.baseX; // distance between moved particle and its initial location
				this.x -= dx / 10; // everytime the func runs, each particle moves closer to where it initially was
			}
			if (this.y != this.baseY) {
				let dy = this.y - this.baseY;
				this.y -= dy / 10; // dividing by 10 makes the movement slow
			}
		}
	}
}

function init() {
	particleArray = [];

	// getImageData will have properties that are automatically generated by calling getImageData method, such as height, width, and data
	// inside data array, there are 4 items which represent each pixel (1 row x 1 column) item, 1-red, 2-green, 3-blue, 4-opacity (the same say as rgb color works)

	// generate particles only if they're inside the pixel data that we set ealier

	// analyze pixel row by row
	for (let y = 0, y2 = textCoordinates.height; y < y2; y++) {
		// for each row, alalyze each pixel from 1 to 100
		for (let x = 0, x2 = textCoordinates.width; x < x2; x++) {
			// take every 4th item in an array so that we can check only the opaicty value
			let num = y * 4 * textCoordinates.width + x * 4 + 3;
			if (textCoordinates.data[num] > 128) {
				// halfway between 0 to 255 (the same say rgb color) - 128 is roughly 0.5 of opacity
				// if opacity is more than 0.5 - meaning within the data
				let positionX = x + adjustX; // adjustX, adjustY will let us move the letter (or data points within the data)
				let positionY = y + adjustY;

				// filter out pixels that have less than 50% of opacity and leave only pixels which has data points (meaning with opacity 1)
				particleArray.push(new Particle(positionX * 10, positionY * 10));
			}
		}
	}

	// generate particles randomly
	// for (let i = 0; i < 1000; i++) {
	// 	let x = Math.random() * canvas.width; // 1 - max width of the canvas
	// 	let y = Math.random() * canvas.height; // 1 - max height of the canvas
	// 	particleArray.push(new Particle(x, y)); // call constructor of its associated class
	// }
}

init();
// console.log(particleArray);

function animate() {
	ctx.clearRect(0, 0, canvas.width, canvas.height);
	for (let i = 0; i < particleArray.length; i++) {
		particleArray[i].draw();
		particleArray[i].update();
	}
	connect();
	requestAnimationFrame(animate); // it tells browser to call the animate func before every repaint and create a loop =
}
animate();

// connect particles with lines when they're close to each other
function connect() {
	let opacityValue = 1;
	// loop through all article and compare each particle with the rest of the particles
	for (let a = 0; a < particleArray.length; a++) {
		for (let b = a; b < particleArray.length; b++) {
			let dx = particleArray[a].x - particleArray[b].x;
			let dy = particleArray[a].y - particleArray[b].y;
			let distance = Math.sqrt(dx * dx + dy * dy);

			// check the distance between each article
			// set max pixel distance of 2 particles when they connect by lines
			// if distance is less than max, draw a line in between
			let maxLimit = 30;
			if (distance < maxLimit) {
				// adjust opacity depending on how far 2 particles are away from eath other
				opacityValue = 1 - distance / maxLimit;
				// this increases opacity if 2 particales are closer & decreases opacity when they're far from each other

				ctx.strokeStyle = `rgba(0, 0, 0, ${opacityValue})`;
				ctx.lineWidth = 1; // should be the same as particle size
				ctx.beginPath();
				ctx.moveTo(particleArray[a].x, particleArray[a].y); // begin the line
				ctx.lineTo(particleArray[b].x, particleArray[b].y); // end the line
				ctx.stroke();
			}
		}
	}
}
